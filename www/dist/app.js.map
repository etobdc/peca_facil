{"version":3,"sources":["app.module.js","app.routes.js","core/config.constants.js","core/factory/API.factory.js","js/app.js","layouts/home.controller.js","structure/main.controller.js","xdk/init-dev.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["(function(){\n\t'use strict';\n\n\tangular\n\t.module('app', [\n\t\t'ngMaterial',\n\t\t'ui.router'\n\t])\n\n})();\n","(function(){\n\t'use strict';\n\n\tangular\n\t\t.module('app')\n\t\t.config(routes);\n\n\tfunction routes($stateProvider, $urlRouterProvider, $locationProvider) {\n\t\t$urlRouterProvider.otherwise('/');\n\n\t\t$stateProvider\n\t\t\t.state('main', {\n\t\t\t\ttemplateUrl: 'structure/main.template.html',\n\t\t\t\tcontroller: 'MainController',\n\t\t\t\tcontrollerAs: 'vm',\n\t\t\t})\n\t\t\t.state('home', {\n\t\t\t\turl: '/',\n\t\t\t\ttemplateUrl: 'layouts/home.template.html',\n\t\t\t\tcontroller: 'HomeController',\n\t\t\t\tcontrollerAs: 'vm',\n\t\t\t\tparent: 'main'\n\t\t\t})\n\n\t\t$locationProvider.html5Mode(false);\n\t}\n\n})();\n","(function() {\r\n\t'use strict';\r\n\t\tangular\r\n\t\t\t.module('app')\r\n\t\t\t.constant('config', {\r\n\t\t\t\turl: 'http://localhost/api/public/api/'\r\n\t\t\t});\r\n})(); ","(function() {\r\n    'use strict';\r\n    \r\n    angular\r\n        .module('app')\r\n        .factory('API', API);\r\n    \r\n    function API($http, config){\r\n        var cache = {};\r\n\r\n        var factory = {\r\n            get: _get,\r\n            post: _post,\r\n            put: _put,\r\n            delete: _delete,\r\n            cacheDestroy: _cacheDestroy,\r\n            addCache: _addCache\r\n        }\r\n        \r\n        function _get(url, param) {\r\n            if(!_getCacheItem(url, param)){\r\n                if (param != undefined) {\r\n                    _setCacheItem(url, param, $http.get(config.url  + url + '/' + param));\r\n                }else{\r\n                    _setCacheItem(url, param, $http.get(config.url  + url));\r\n                }                \r\n            }\r\n            return _getCacheItem(url, param);\r\n        };\r\n\r\n        function _post(url, params) {\r\n            return $http.post(config.url + url, params);\r\n        };\r\n        function _put(url, params) {\r\n            return $http.put(config.url + url, params);\r\n        };\r\n        function _delete(url, params) {\r\n            return $http.delete(config.url + url, params);\r\n        };\r\n\r\n        function _cacheDestroy(){\r\n            cache = {};\r\n        }\r\n\r\n        function _addCache(key, value){\r\n            cache[key] = value;\r\n        }\r\n\r\n        /* Privates */\r\n\r\n        function _getCacheItem(url, param){\r\n            return cache[_urlToKey(url, param)];\r\n        }\r\n\r\n        function _setCacheItem(url, param, item){\r\n            cache[_urlToKey(url, param)] = item;\r\n        }\r\n\r\n        function _urlToKey(url, param){\r\n            var key = '?t=' + url;\r\n            if(param){\r\n                key += '&p=' + param;\r\n            }\r\n            return key;\r\n        }\r\n\r\n        return factory;\r\n    }\r\n\r\n})();","/*\r\n * Please see the included README.md file for license terms and conditions.\r\n */\r\n\r\n\r\n// This file is a suggested starting place for your code.\r\n// It is completely optional and not required.\r\n// Note the reference that includes it in the index.html file.\r\n\r\n\r\n/*jslint browser:true, devel:true, white:true, vars:true */\r\n/*global $:false, intel:false app:false, dev:false, cordova:false */\r\n\r\n\r\n// For improved debugging and maintenance of your app, it is highly\r\n// recommended that you separate your JavaScript from your HTML files.\r\n// Use the addEventListener() method to associate events with DOM elements.\r\n\r\n// For example:\r\n\r\n// var el ;\r\n// el = document.getElementById(\"id_myButton\") ;\r\n// el.addEventListener(\"click\", myEventHandler, false) ;\r\n\r\n\r\n\r\n// The function below is an example of the best way to \"start\" your app.\r\n// This example is calling the standard Cordova \"hide splashscreen\" function.\r\n// You can add other code to it or add additional functions that are triggered\r\n// by the same event or other events.\r\n\r\nfunction onAppReady() {\r\n    if( navigator.splashscreen && navigator.splashscreen.hide ) {   // Cordova API detected\r\n        navigator.splashscreen.hide() ;\r\n    }\r\n}\r\n// document.addEventListener(\"app.Ready\", onAppReady, false) ;\r\ndocument.addEventListener(\"deviceready\", onAppReady, false) ;\r\n// document.addEventListener(\"onload\", onAppReady, false) ;\r\n\r\n// The app.Ready event shown above is generated by the init-dev.js file; it\r\n// unifies a variety of common \"ready\" events. See the init-dev.js file for\r\n// more details. You can use a different event to start your app, instead of\r\n// this event. A few examples are shown in the sample code above. If you are\r\n// using Cordova plugins you need to either use this app.Ready event or the\r\n// standard Crordova deviceready event. Others will either not work or will\r\n// work poorly.\r\n\r\n// NOTE: change \"dev.LOG\" in \"init-dev.js\" to \"true\" to enable some console.log\r\n// messages that can help you debug Cordova app initialization issues.\r\n","(function(){\n  'use strict';\n\n  angular\n    .module('app')\n    .controller('HomeController', HomeController);\n\n  function HomeController(API,$mdToast){\n    let vm = this;\n    vm.btnLoginTexto = \"Entrar\";\n    vm.btnCadastroTexto = \"Cadastrar\";\n    vm.btnLogin = 0;\n    vm.btnCadastro = 0;\n    vm.logar = logar;\n    vm.cadastroUser = cadastroUser;\n\n\n    vm.showSimpleToast = function(msg) {\n      $mdToast.show(\n          $mdToast.simple()\n          .textContent(msg)\n          .position('top right')\n          .hideDelay(10000)\n      );\n    };\n\n\n\n    function logar(dados){\n      vm.btnLogin = 1;\n      vm.btnLoginTexto = \"Entrando\";\n      API.post('login',dados).then(result => {              \n        console.log(result.data);\n        vm.btnLogin = 0;\n        vm.btnLoginTexto = \"Entrar\";\n        if(result.data.password != undefined){\n          vm.showSimpleToast('Senha de no minimo 6 caracteres');\n        }\n        if(result.data.email != undefined){\n          vm.showSimpleToast('E-mail inválido');\n        }\n        if(!result.data){\n          vm.showSimpleToast('Usuário não encontrado');\n        }\n      }).catch(error =>{\n        vm.btnLogin = 0;\n        vm.btnLoginTexto = \"Entrar\";\n        if(error.data.password != undefined){\n          vm.showSimpleToast('Senha de no minimo 6 caracteres');\n        }\n        if(error.data.email != undefined){\n          vm.showSimpleToast('E-mail inválido');\n        }\n        if(error.data == ''){\n          vm.showSimpleToast('Usuário não encontrado');\n        }\n      });\n    }\n\n    function cadastroUser(dados){\n      vm.btnCadastro = 1;\n      vm.btnCadastroTexto = \"Cadastrando\";\n\n      API.post('register',dados).then(result => {\n        console.log(result.data);\n      }).catch(error =>{\n        vm.btnCadastro = 0;\n        vm.btnCadastroTexto = \"Cadastrar\";\n        if(error.data.password != undefined){\n          vm.showSimpleToast('Senha de no minimo 6 caracteres');\n        }\n        if(error.data.email != undefined){\n          vm.showSimpleToast('E-mail inválido');\n        }\n      });\n    }\n  }\n\n})();\n","(function(){\n\t'use strict';\n\n\tangular\n\t\t.module('app')\n\t\t.controller('MainController', MainController);\n\n\t\tfunction MainController(){\n\t\t\tlet vm = this;\n\n\t\t}\n\n})();\n","/*\r\n * Copyright � 2012-2015, Intel Corporation. All rights reserved.\r\n * Please see the included README.md file for license terms and conditions.\r\n */\r\n\r\n\r\n// This file is optional.\r\n// It is only required if you choose to use the app.Ready event it generates.\r\n// Note the reference that includes it in the index.html file.\r\n\r\n\r\n/*\r\n * NOTE: In most cases, you can leave the code in this file alone and use it as is.\r\n *\r\n * The functions in this file are designed to reliably detect various \"ready\" events\r\n * within a variety of containers (Intel XDK \"legacy\" container, Cordova 3.x container,\r\n * standard browser, App Preview, Crosswalk, etc.). It \"unifies\" the commonly used\r\n * ready events and is very helpful for moving a \"web app\" to a \"hybrid app\" scenario.\r\n *\r\n * This file has no dependencies. It will generate a custom \"app.Ready\" event\r\n * that you should use once to start your application, rather than waiting on a\r\n * \"device ready\" or \"document ready\" or \"window load\" or similar events.\r\n *\r\n * You should not have to modify anything in this file to use it. See the example\r\n * index.html file that accompanies this file (in its sample repo location) for\r\n * recommendations on the best placement of this file relative to other files and\r\n * for recommendations regarding the loading of other JavaScript files.\r\n *\r\n * There are a large number of console.log messages contained within this file.\r\n * They can be used to debug initialization problems and understand how it works.\r\n * It is highly recommended that you leave them in your app, they will not unduly\r\n * slow down or burden your application.\r\n *\r\n * There are many comments in this file and the accompanying index.html file.\r\n * Please read the comments within for details and further documentation.\r\n *\r\n * BTW: \"dev\" means \"device\" in this context, not \"develop,\" because it grew out\r\n * of a desire to build a more reliable and flexible \"device ready\" detector.\r\n */\r\n\r\n\r\n/*jslint browser:true, devel:true, white:true, vars:true */\r\n/*global $:false, intel:false, dev:false, performance:false */\r\n\r\n\r\n\r\nwindow.dev = window.dev || {} ;         // could be predefined in index.html file...\r\n\r\n\r\n\r\n// Use performance counter if it is available, otherwise, use milliseconds since 1970\r\n\r\nif( window.performance && performance.now ) {\r\n    dev.timeStamp = function() { return performance.now().toFixed(3) ; } ;\r\n}\r\nelse {\r\n    dev.timeStart = Date.now() ;        // feeble zero ref for relative time in ms\r\n    dev.timeStamp = function() { return (Date.now() - dev.timeStart) ; } ;\r\n}\r\n\r\n\r\n\r\n// Set to \"true\" if you want the console.log messages to appear.\r\n// Helpful for debugging and understanding how this thing works.\r\n\r\ndev.LOG = dev.LOG || false ;\r\n\r\ndev.consoleLog = function() {       // only emits console.log messages if dev.LOG != false\r\n    if( dev.LOG ) {\r\n        var args = Array.prototype.slice.call(arguments, 0) ;\r\n        console.log.apply(console, args) ;\r\n    }\r\n} ;\r\n\r\n\r\n\r\n// Defines some delays constants used throughout for ready detections.\r\n// Each should be smaller than the next; most cases should work as is.\r\n// Lowering dev.BROWSER speeds up detection of browser scenario...\r\n// ...at expense of possible false detects of browser environment...\r\n// ...probably okay to go as low as 3000ms, depends on external libraries, etc.\r\n// dev.NAME = dev.NAME || ## ; allows for override of values in index.html\r\n\r\nif( typeof window.cordova !== \"undefined\" ) // if real cordova.js is present, we should detect a \"deviceready\"...\r\n    dev.BROWSER = dev.BROWSER || 7000 ;     // ...best if >5 seconds when Cordova is expected to be present\r\n\r\ndev.INSURANCE = dev.INSURANCE || 250 ;      // msecs, insurance on registering ready events detected\r\ndev.WINDOW_LOAD = dev.WINDOW_LOAD || 500 ;  // msecs, for combating premature window load events\r\ndev.BROWSER = dev.BROWSER || 500 ;          // msecs, non-Cordova apps don't care about \"deviceready\" events\r\ndev.FAIL_SAFE = dev.FAIL_SAFE || 10000 ;    // msecs, if all else fails, this saves our bacon :-)\r\n\r\n\r\n\r\n// Used to keep track of time when each of these items was triggered.\r\n// Sorry for the weird names in the isDeviceReady structure, it's done for\r\n// easier debugging and comparison of numbers when displayed in console.log messages.\r\n\r\ndev.isDeviceReady = {                   // listed in approximate order expected\r\n    a_startTime______:dev.timeStamp(),  // when we started execution of this module\r\n    b_fnDocumentReady:false,            // detected document.readyState == \"complete\"\r\n    c_cordova_ready__:false,            // detected cordova device ready event\r\n    d_xdk_ready______:false,            // detected Intel XDK device ready event\r\n    e_fnDeviceReady__:false,            // entered onDeviceReady()\r\n    f_browser_ready__:false             // detected browser container\r\n} ;\r\n\r\n\r\n\r\n// Where the device ready event ultimately ends up, regardless of environment.\r\n// Runs after underlying device native code and browser is initialized.\r\n// Usually not much needed here, just additional \"device init\" code.\r\n// See initDeviceReady() below for code that kicks off this function.\r\n// This function works with Cordova and Intel XDK webview or in a browser.\r\n\r\n// NOTE: Customize this function, if necessary, for low-level init of your app.\r\n\r\ndev.onDeviceReady = function() {\r\n    var fName = \"dev.onDeviceReady():\" ;\r\n    dev.consoleLog(fName, \"entry\") ;\r\n\r\n    // Useful for debug and understanding initialization flow.\r\n    if( dev.isDeviceReady.e_fnDeviceReady__ ) {\r\n        dev.consoleLog(fName, \"function terminated\") ;\r\n        return ;\r\n    } else {\r\n        dev.isDeviceReady.e_fnDeviceReady__ = dev.timeStamp() ;\r\n    }\r\n\r\n    // TODO: change this to use new custom events if I confirm it works in all webviews.\r\n    // All device initialization is done; create and issue custom event named \"app.Ready\".\r\n    // Using deprecated custom events until I can confirm new method works in all webviews...\r\n\r\n    var evt = document.createEvent(\"Event\") ;\r\n    evt.initEvent(\"app.Ready\", false, false) ;\r\n    document.dispatchEvent(evt) ;\r\n\r\n    dev.consoleLog(fName, dev.isDeviceReady) ;\r\n    dev.consoleLog(fName, \"exit\") ;\r\n} ;\r\n\r\n\r\n\r\n/*\r\n * The following is an excerpt from the 3.3.0 cordova.js file and is useful for understanding\r\n * Cordova events. The order of events during page load and Cordova startup is as follows:\r\n *\r\n * onDOMContentLoaded*         Internal event that is received when the web page is loaded and parsed.\r\n * onNativeReady*              Internal event that indicates the Cordova native side is ready.\r\n * onCordovaReady*             Internal event fired when all Cordova JavaScript objects have been created.\r\n * onDeviceReady*              User event fired to indicate that Cordova is ready\r\n * onResume                    User event fired to indicate a start/resume lifecycle event\r\n * onPause                     User event fired to indicate a pause lifecycle event\r\n * onDestroy*                  Internal event fired when app is being destroyed (User should use window.onunload event, not this one).\r\n *\r\n * The events marked with an * are sticky. Once they have fired, they will stay in the fired state.\r\n * All listeners that subscribe after the event is fired will be executed right away.\r\n *\r\n * The only Cordova events that user code should register for are:\r\n *      deviceready           Cordova native code is initialized and Cordova APIs can be called from JavaScript\r\n *      pause                 App has moved to background\r\n *      resume                App has returned to foreground\r\n *\r\n * Listeners can be registered as:\r\n *      document.addEventListener(\"deviceready\", myDeviceReadyListener, false);\r\n *      document.addEventListener(\"resume\", myResumeListener, false);\r\n *      document.addEventListener(\"pause\", myPauseListener, false);\r\n *\r\n * The DOM lifecycle events should be used for saving and restoring state\r\n *      window.onload\r\n *      window.onunload\r\n *\r\n */\r\n\r\n// The following is not fool-proof, we're mostly interested in detecting one\r\n// or both events to insure device init is finished, detecting either will do.\r\n// Even though the timing should indicate which container, it does not always work.\r\n\r\n// If this event is called first, we should be in the Cordova container.\r\n\r\ndev.onDeviceReadyCordova = function() {\r\n    dev.isDeviceReady.c_cordova_ready__ = dev.timeStamp() ;\r\n    var fName = \"dev.onDeviceReadyCordova():\" ;\r\n    dev.consoleLog(fName, dev.isDeviceReady.c_cordova_ready__) ;\r\n    window.setTimeout(dev.onDeviceReady, dev.INSURANCE) ;\r\n} ;\r\n\r\n// If this event is called first, we should be in the legacy Intel XDK container.\r\n\r\ndev.onDeviceReadyXDK = function() {\r\n    dev.isDeviceReady.d_xdk_ready______ = dev.timeStamp() ;\r\n    var fName = \"dev.onDeviceReadyXDK():\" ;\r\n    dev.consoleLog(fName, dev.isDeviceReady.d_xdk_ready______) ;\r\n    window.setTimeout(dev.onDeviceReady, dev.INSURANCE) ;\r\n} ;\r\n\r\n// This is a faux onDeviceReady for browser scenario, mostly for code symmetry and fail-safe.\r\n\r\ndev.onDeviceReadyBrowser = function() {\r\n    dev.isDeviceReady.f_browser_ready__ = dev.timeStamp() ;\r\n    var fName = \"dev.onDeviceReadyBrowser():\" ;\r\n    dev.consoleLog(fName, dev.isDeviceReady.f_browser_ready__) ;\r\n    window.setTimeout(dev.onDeviceReady, dev.INSURANCE) ;\r\n} ;\r\n\r\n\r\n\r\n// Runs after document is loaded, and sets up wait for native (device) init to finish.\r\n// If we're running in a browser we're ready to go when document is loaded, but...\r\n// if we're running on a device we need to wait for native code to finish its init.\r\n\r\ndev.initDeviceReady = function() {\r\n    var fName = \"dev.initDeviceReady():\" ;\r\n    dev.consoleLog(fName, \"entry\") ;\r\n\r\n    // Useful for debug and understanding initialization flow.\r\n    if( dev.isDeviceReady.b_fnDocumentReady ) {\r\n        dev.consoleLog(fName, \"function terminated\") ;\r\n        return ;\r\n    } else {\r\n        dev.isDeviceReady.b_fnDocumentReady = dev.timeStamp() ;\r\n    }\r\n\r\n    document.addEventListener(\"intel.xdk.device.ready\", dev.onDeviceReadyXDK, false) ;\r\n    document.addEventListener(\"deviceready\", dev.onDeviceReadyCordova, false) ;\r\n    window.setTimeout(dev.onDeviceReadyBrowser, dev.BROWSER) ;\r\n\r\n    // Last one, above, is fail-safe, in case we got no device ready event from Cordova or Intel XDK.\r\n    // Cordova will timeout after five seconds, so we use a longer timeout to be conservative.\r\n    // Very end of this file includes a \"fail-safe, fail-safe\" in case all else fails!\r\n\r\n    // TODO: might want to double-check for Cordova deviceready, shouldn't be required...\r\n    // \"if\" logic (below) needs further investigation in Cordova, legacy and debug containers\r\n    // 0 = Non-sticky, 1 = Sticky non-fired, 2 = Sticky fired.\r\n    // if( window.channel && channel.onCordovaReady && (channel.onCordovaReady.state === 2) )\r\n    //     dev.onDeviceReadyCordova() ;\r\n\r\n    dev.consoleLog(fName, \"navigator.vendor:\", navigator.vendor) ;\r\n    dev.consoleLog(fName, \"navigator.platform:\", navigator.platform) ;\r\n    dev.consoleLog(fName, \"navigator.userAgent:\", navigator.userAgent) ;\r\n\r\n    dev.consoleLog(fName, \"exit\") ;\r\n} ;\r\n\r\n\r\n\r\n// Wait for document ready before looking for device ready.\r\n// This insures the app does not start running until DOM is ready and...\r\n// ...makes it easier to deal with both in-browser and on-device scenarios and...\r\n// ...makes it easier to init device-dependent and device-independent code in one place.\r\n\r\n// NOTE: document.readyState seems to be more reliable, but seems not to be omnipresent.\r\n// NOTE: Delay after \"load\" event is added because some webviews appear to trigger prematurely.\r\n// NOTE: Looks like overkill, we are trying to capture any and all doc ready events.\r\n// Parts derived from http://dean.edwards.name/weblog/2006/06/again/\r\n\r\nif( document.readyState ) {\r\n    dev.consoleLog(\"document.readyState:\", document.readyState) ;\r\n    document.onreadystatechange = function () {\r\n        dev.consoleLog(\"document.readyState:\", document.readyState) ;\r\n        if( (document.readyState === \"complete\") || (document.readyState === \"loaded\") ) {\r\n            dev.initDeviceReady() ;\r\n        }\r\n    } ;\r\n}\r\n\r\nif( document.addEventListener ) {\r\n    dev.consoleLog(\"document.addEventListener:\", dev.timeStamp()) ;\r\n    document.addEventListener(\"DOMContentLoaded\", dev.initDeviceReady, false) ;\r\n}\r\n\r\nif( window.addEventListener ) {\r\n    dev.consoleLog(\"window.addEventListener:\", dev.timeStamp()) ;\r\n    window.addEventListener(\"load\", dev.initDeviceReady, false) ;\r\n} else if( window.attachEvent ) {\r\n    dev.consoleLog(\"window.attachEvent:\", dev.timeStamp()) ;\r\n    window.attachEvent(\"onload\", dev.initDeviceReady) ;\r\n}\r\n\r\n// window.addEventListener(\"load\", function(){window.setTimeout(dev.initDeviceReady,dev.WINDOW_LOAD);}.bind(dev), false) ;\r\n// window.onload = function(){window.setTimeout(dev.initDeviceReady,dev.WINDOW_LOAD);}.bind(dev) ;\r\n// window.onload = dev.initDeviceReady ;\r\n\r\nwindow.setTimeout(dev.initDeviceReady, dev.FAIL_SAFE) ;     // fail-safe fail-safe, just in case we miss all events!\r\ndev.consoleLog(\"end init-dev.js:\", dev.timeStamp()) ;       // debug marker to indicate finished reading init-dev.js\r\n"]}